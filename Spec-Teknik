
SPEC-TEKNIK FOR RUNNING OLLAMA WITH NVIDIA AND CUDA

______________________________________________________________________________________________________
NVIDIA

--> cat /proc/driver/nvidia/version

--> update-pciids

--> lspci | grep -i nvidia
01:00.0 3D controller: NVIDIA Corporation GP107M [GeForce GTX 1050 Mobile] (rev a1)

--> nvidia-smi

--> wget https://developer.download.nvidia.com/compute/cuda/repos/debian12/x86_64/cuda-keyring_1.1-1_all.deb
--> dpkg -i cuda-keyring_1.1-1_all.deb
--> apt update
--> apt install -y nvidia-driver cuda

--> lsmod | grep nvidia
--> apt install --reinstall nvidia-kernel-dkms
--> modprobe nvidia
--> nvidia-smi
--> nvcc --version

find /etc -name '*nvidia*' -exec rm -rf {} +
find /lib/modules -name '*nvidia*' -exec rm -rf {} +
find /usr -name '*nvidia*' -exec rm -rf {} +

update-initramfs -u
reboot

apt purge '*nvidia*' cuda*
apt autoremove
apt update
sudo apt install -y nvidia-legacy-470-driver nvidia-kernel-dkms

______________________________________________________________________________________________________
CUDA

https://developer.nvidia.com/cuda-downloads?target_os=Linux&target_arch=x86_64&Distribution=Debian&target_version=12&target_type=deb_local

https://developer.download.nvidia.com/compute/cuda/11.4.0/local_installers/cuda-repo-debian10-11-4-local_11.4.0-470.42.01-1_amd64.deb
dpkg -i cuda-repo-debian12-12-9-local_12.9.0-575.51.03-1_amd64.deb
cp /var/cuda-repo-debian12-12-9-local/cuda-*-keyring.gpg /usr/share/keyrings/
apt-get update
apt-get -y install cuda-toolkit-12-9

apt-key add /var/cuda-repo-debian10-11-4-local/7fa2af80.pub
apt-get install cuda

______________________________________________________________________________________________________
TESTER NVIDIA / CUDA

script --> vector_add.cu

// vector_add.cu
#include <iostream>
#include <cuda_runtime.h>

__global__ void vectorAdd(const float *A, const float *B, float *C, int N) {
    int i = threadIdx.x + blockDim.x * blockIdx.x;
    if (i < N) C[i] = A[i] + B[i];
}

int main() {
    int N = 1 << 20; // 1 million éléments
    size_t size = N * sizeof(float);

    // Allocation host
    float *h_A = (float *)malloc(size);
    float *h_B = (float *)malloc(size);
    float *h_C = (float *)malloc(size);

    for (int i = 0; i < N; i++) {
        h_A[i] = 1.0f;
        h_B[i] = 2.0f;
    }

    // Allocation device
    float *d_A, *d_B, *d_C;
    cudaMalloc(&d_A, size);
    cudaMalloc(&d_B, size);
    cudaMalloc(&d_C, size);

    // Transfert vers device
    cudaMemcpy(d_A, h_A, size, cudaMemcpyHostToDevice);
    cudaMemcpy(d_B, h_B, size, cudaMemcpyHostToDevice);

    // Lancement du kernel
    int threadsPerBlock = 256;
    int blocksPerGrid = (N + threadsPerBlock - 1) / threadsPerBlock;
    vectorAdd<<<blocksPerGrid, threadsPerBlock>>>(d_A, d_B, d_C, N);

    // Récupération du résultat
    cudaMemcpy(h_C, d_C, size, cudaMemcpyDeviceToHost);

    // Vérification rapide
    float maxError = 0.0f;
    for (int i = 0; i < N; i++) {
        maxError = fmax(maxError, fabs(h_C[i] - 3.0f));
    }

    std::cout << "Max error: " << maxError << std::endl;

    // Nettoyage
    cudaFree(d_A); cudaFree(d_B); cudaFree(d_C);
    free(h_A); free(h_B); free(h_C);

    return 0;
}

--> nvcc -ccbin /usr/bin/gcc-10 -o vector_add vector_add.cu -lstdc++ -lm
--> ./vector_add = Max error: 0
--> nvidia-persistenced --user ollama












